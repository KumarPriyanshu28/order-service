{
  "openapi": "3.0.1",
  "info": {
    "title": "order-service",
    "contact": {
      "name": "Kumar Priyanshu",
      "email": "kumarpriyanshu2822@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "localhost:8086/orders"
    }
  ],
  "tags": [
    {
      "name": "OrderController",
      "description": "APIs for managing orders"
    }
  ],
  "paths": {
    "/orders": {
      "get": {
        "tags": [
          "Fetch all orders",
          "OrderController"
        ],
        "summary": "Retrieve all orders.",
        "description": "Retrieve all the orders from the database.",
        "operationId": "getAllOrders",
        "responses": {
          "200": {
            "description": "Successfully retrieved the orders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "OrderController",
          "Create order"
        ],
        "summary": "Creates a new order.",
        "description": "Creates a new order in the database.",
        "operationId": "createOrder",
        "parameters": [
          {
            "name": "OrderDto",
            "in": "query",
            "description": "The Dto containing information for creating a new order."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid input for creating a order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "200": {
            "description": "Successfully created a new order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": [
          "Fetch order by its Id",
          "OrderController"
        ],
        "summary": "Retrieves an order by its Id",
        "description": "Retrieves a single order from the database based on its unique identifier.",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The unique identifier of the order.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "200": {
            "description": "Successfully retrieved the order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Delete order",
          "OrderController"
        ],
        "summary": "Deletes an order by its Id.",
        "description": "Deletes an order from the database based on its unique identifier.",
        "operationId": "deleteOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Id of the order to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "404": {
            "description": "order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "OrderDto": {
        "required": [
          "orderLineDtoList"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "format": "int64"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "totalPrice": {
            "type": "number",
            "format": "double"
          },
          "orderLineDtoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderLineDto"
            }
          }
        }
      },
      "OrderLineDto": {
        "required": [
          "productId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "orderLineId": {
            "type": "integer",
            "format": "int64"
          },
          "productId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "maximum": 1000,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}